---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="Calculadora de Precios Oficial - Taxi Madrid | MadridTaxis">
  <Header />
  
  <main style="margin-top: 60px; min-height: 100vh; background: #fafafa;">
    
    <!-- Hero Section -->
    <section class="py-20 bg-gradient-to-r from-blue-800 to-blue-600 text-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-4xl font-bold mb-4">Calculadora de Precios Oficial</h1>
        <p class="text-xl text-blue-200 mb-2">Tarifas oficiales de taxi Madrid 2025</p>
        <p class="text-blue-100">Resolución 4 diciembre 2024 - Vigente desde 1 enero 2025</p>

        <!-- Indicador de tarifa actual en tiempo real -->
        <div class="mt-8 inline-block bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/20">
          <div class="flex items-center justify-center mb-2">
            <i class="fas fa-clock mr-2 text-blue-200"></i>
            <span class="text-sm text-blue-200">Hora Madrid - Tarifa Actual</span>
          </div>
          <div class="text-lg font-bold" id="current-time-display">
            Cargando...
          </div>
          <div class="text-sm text-blue-200 mt-1" id="current-tariff-info">
            Calculando tarifa actual...
          </div>
        </div>
      </div>
    </section>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Calculadora Principal -->
        <div class="lg:col-span-2">
          <div class="calculator-section">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center">
              <i class="fas fa-route mr-3 text-red-600"></i>
              Calculadora de Rutas y Tarifas
            </h2>

            <!-- Error message -->
            <div id="error-message" class="error-message mb-4" style="display: none;">
              <i class="fas fa-exclamation-circle mr-2"></i>
              <span id="error-text"></span>
            </div>

            <!-- Inputs -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  <i class="fas fa-map-marker-alt mr-2 text-green-600"></i>
                  Dirección de origen
                </label>
                <input
                  type="text"
                  id="departure-input"
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all"
                  placeholder="Ej: Las Rozas, Pozuelo, Aeropuerto..."
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  <i class="fas fa-flag-checkered mr-2 text-red-600"></i>
                  Dirección de destino
                </label>
                <input
                  type="text"
                  id="destination-input"
                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all"
                  placeholder="Ej: Majadahonda, Atocha, Madrid..."
                />
              </div>
            </div>

            <!-- Sugerencias rápidas -->
            <div class="mb-6 p-4 bg-gray-50 rounded-lg border">
              <h4 class="text-sm font-medium text-gray-700 mb-3">
                <i class="fas fa-star mr-2 text-yellow-500"></i>
                Ubicaciones disponibles:
              </h4>
              <div class="location-suggestions">
                <button data-location="Aeropuerto Barajas" class="suggestion-btn">Aeropuerto Barajas</button>
                <button data-location="Las Rozas" class="suggestion-btn">Las Rozas</button>
                <button data-location="Majadahonda" class="suggestion-btn">Majadahonda</button>
                <button data-location="Pozuelo de Alarcón" class="suggestion-btn">Pozuelo de Alarcón</button>
                <button data-location="Atocha" class="suggestion-btn">Atocha</button>
                <button data-location="Plaza Castilla" class="suggestion-btn">Plaza Castilla</button>
                <button data-location="Alcobendas" class="suggestion-btn">Alcobendas</button>
                <button data-location="Getafe" class="suggestion-btn">Getafe</button>
                <button data-location="Leganés" class="suggestion-btn">Leganés</button>
                <button data-location="Móstoles" class="suggestion-btn">Móstoles</button>
                <button data-location="Alcorcón" class="suggestion-btn">Alcorcón</button>
                <button data-location="Fuenlabrada" class="suggestion-btn">Fuenlabrada</button>
                <button data-location="Torrejón de Ardoz" class="suggestion-btn">Torrejón de Ardoz</button>
                <button data-location="Alcalá de Henares" class="suggestion-btn">Alcalá de Henares</button>
                <button data-location="Chamartín" class="suggestion-btn">Chamartín</button>
                <button data-location="Puerta del Sol" class="suggestion-btn">Puerta del Sol</button>
                <button data-location="Gran Vía" class="suggestion-btn">Gran Vía</button>
                <button data-location="Plaza Mayor" class="suggestion-btn">Plaza Mayor</button>
                <button data-location="Cibeles" class="suggestion-btn">Cibeles</button>
                <button data-location="Retiro" class="suggestion-btn">Retiro</button>
                <button data-location="Moncloa" class="suggestion-btn">Moncloa</button>
              </div>
              <div class="mt-3 text-xs text-gray-500">
                💡 Haz clic en cualquier ubicación para rellenar automáticamente
              </div>
            </div>

            <!-- Botón intercambiar -->
            <div class="flex justify-center mb-4">
              <button
                id="swap-button"
                class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <i class="fas fa-exchange-alt"></i>
                Intercambiar origen y destino
              </button>
            </div>

            <!-- Opciones del servicio -->
            <div class="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h3 class="text-lg font-medium text-gray-800 mb-3">
                <i class="fas fa-cog mr-2 text-blue-600"></i>
                Opciones del servicio
              </h3>
              <div class="flex flex-wrap gap-4">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="prebooked-checkbox"
                    class="mr-2 w-4 h-4 text-red-600 rounded focus:ring-red-500"
                  />
                  <span class="text-sm">Servicio concertado (reserva previa)</span>
                </label>
              </div>
            </div>

            <!-- Configuración avanzada -->
            <div class="mb-6 p-4 bg-gray-50 rounded-lg border">
              <button
                id="advanced-toggle"
                class="flex items-center text-sm font-medium text-gray-700 mb-3"
              >
                <i class="fas fa-cog mr-2 text-gray-500"></i>
                Configuración avanzada
                <i class="fas fa-chevron-down ml-2 transition-transform" id="advanced-chevron"></i>
              </button>
              <div id="advanced-options" style="display: none;">
                <div class="mt-3">
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    Factor de tráfico: <span id="traffic-value">30%</span>
                  </label>
                  <input
                    type="range"
                    id="traffic-slider"
                    min="0"
                    max="100"
                    value="30"
                    class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <div class="flex justify-between text-xs text-gray-500 mt-1">
                    <span>Sin tráfico</span>
                    <span>Tráfico intenso</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Mapa -->
            <div class="mb-6 relative">
              <h3 class="text-lg font-medium text-gray-800 mb-3">
                <i class="fas fa-map mr-2 text-green-600"></i>
                Mapa de la ruta
              </h3>
              <div id="map" class="map-container">
                <div class="map-placeholder">
                  📍 Ingresa origen y destino para ver la ruta en el mapa
                </div>
              </div>
              <div id="loading-overlay" class="loading-overlay" style="display: none;">
                <div class="spinner"></div>
              </div>
            </div>

            <!-- Botones de acción -->
            <div class="flex flex-col sm:flex-row gap-4">
              <button
                id="calculate-button"
                class="flex-1 bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center shadow-lg disabled:opacity-70 disabled:cursor-not-allowed"
              >
                <i class="fas fa-calculator mr-2"></i>
                Calcular Ruta y Tarifa
              </button>
              <button
                id="reset-button"
                class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center shadow-lg disabled:opacity-70 disabled:cursor-not-allowed"
              >
                <i class="fas fa-redo mr-2"></i>
                Reiniciar
              </button>
            </div>
          </div>
        </div>

        <!-- Panel de Resultados -->
        <div class="lg:col-span-1">
          <div class="calculator-section">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center">
              <i class="fas fa-chart-bar mr-3 text-red-600"></i>
              Resultados
            </h2>

            <div id="results-container">
              <!-- Placeholder inicial -->
              <div id="results-placeholder" class="text-center py-12 text-gray-400">
                <i class="fas fa-calculator text-6xl mb-4"></i>
                <p class="text-lg mb-2">Calculadora de Precios</p>
                <p class="text-sm mb-4">Ingrese origen y destino para calcular el precio oficial</p>
                <div class="text-xs text-gray-500 space-y-1">
                  <p>✓ Tarifas oficiales Madrid 2025</p>
                  <p>✓ Cálculo automático de tarifa</p>
                  <p>✓ Rutas reales por carretera</p>
                </div>
              </div>

              <!-- Resultados (se llena dinámicamente) -->
              <div id="results-content" style="display: none;">
                <!-- Se llena con JavaScript -->
              </div>
            </div>
          </div>

          <!-- Información de tarifas -->
          <div class="calculator-section mt-6">
            <h3 class="text-lg font-medium text-gray-800 mb-4 flex items-center">
              <i class="fas fa-info-circle mr-2 text-blue-600"></i>
              Información de Tarifas
            </h3>
            <div class="space-y-3 text-sm">
              <div class="p-3 bg-blue-50 rounded border-l-4 border-blue-400">
                <strong>🛫 Tarifa 4 (33€ fija):</strong><br/>
                Aeropuerto ↔ Interior M-30
              </div>
              <div class="p-3 bg-orange-50 rounded border-l-4 border-orange-400">
                <strong>🛫 Tarifa 3 (mínima 22€):</strong><br/>
                Aeropuerto ↔ Fuera M-30
              </div>
              <div class="p-3 bg-green-50 rounded border-l-4 border-green-400">
                <strong>🚂 Tarifa 7 (mínima 7,50€):</strong><br/>
                Desde estaciones de tren
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  </main>
  
  <Footer />
</Layout>

<style>
  /* CSS completo migrado de v0.dev */
  .calculator-section {
    background: white;
    border-radius: 12px;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    margin-bottom: 2rem;
  }
  
  .results-card {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border: 1px solid #cbd5e1;
    border-radius: 12px;
    padding: 1.5rem;
  }
  
  .tariff-badge {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1rem;
  }
  
  .price-breakdown {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #e5e7eb;
  }
  
  .total-price {
    background: linear-gradient(135deg, #cc1417 0%, #b91c1c 100%);
    color: white;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    font-size: 1.25rem;
    font-weight: bold;
    margin-top: 1rem;
  }
  
  .error-message {
    background-color: #fee2e2;
    color: #b91c1c;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #b91c1c;
  }
  
  .map-container {
    height: 400px;
    width: 100%;
    border-radius: 8px;
    border: 2px solid #e5e7eb;
    background: #f9fafb;
    position: relative;
  }

  .map-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    font-size: 16px;
  }
  
  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    border-radius: 8px;
  }
  
  .spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border-left-color: #cc1417;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .location-suggestions {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 0.5rem;
  }
  
  .suggestion-btn {
    padding: 0.5rem 1rem;
    background: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s;
    text-align: left;
    font-size: 0.875rem;
    color: #374151;
    font-weight: 500;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .suggestion-btn:hover {
    background: #e5e7eb;
    border-color: #9ca3af;
  }
  
  .suggestion-btn:active {
    background: #d1d5db;
  }
  
  .route-type-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    margin-top: 0.5rem;
  }
  
  .route-type-real {
    background-color: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }
  
  .route-type-estimated {
    background-color: #ffedd5;
    color: #9a3412;
    border: 1px solid #fed7aa;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .calculator-section {
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .map-container {
      height: 300px;
    }
    
    .location-suggestions {
      grid-template-columns: 1fr;
    }
  }

  /* Utility classes */
  .space-y-3 > * + * { margin-top: 12px; }
  .space-y-1 > * + * { margin-top: 4px; }
  .bg-gradient-to-r { background-image: linear-gradient(to right, var(--tw-gradient-stops)); }
  .from-blue-800 { --tw-gradient-from: #1e40af; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(30, 64, 175, 0)); }
  .to-blue-600 { --tw-gradient-to: #2563eb; }
  .text-blue-200 { color: #bfdbfe; }
  .text-blue-100 { color: #dbeafe; }
  .max-w-7xl { max-width: 1280px; }
  .mx-auto { margin-left: auto; margin-right: auto; }
  .px-4 { padding-left: 16px; padding-right: 16px; }
  .py-20 { padding-top: 80px; padding-bottom: 80px; }
  .py-12 { padding-top: 48px; padding-bottom: 48px; }
  .text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .text-2xl { font-size: 1.5rem; line-height: 2rem; }
  .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
  .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .text-xs { font-size: 0.75rem; line-height: 1rem; }
  .font-bold { font-weight: 700; }
  .font-semibold { font-weight: 600; }
  .font-medium { font-weight: 500; }
  .text-white { color: white; }
  .text-gray-800 { color: #1f2937; }
  .text-gray-700 { color: #374151; }
  .text-gray-600 { color: #4b5563; }
  .text-gray-500 { color: #6b7280; }
  .text-gray-400 { color: #9ca3af; }
  .text-red-600 { color: #dc2626; }
  .text-green-600 { color: #16a34a; }
  .text-blue-600 { color: #2563eb; }
  .text-yellow-500 { color: #eab308; }
  .bg-white { background-color: white; }
  .bg-gray-50 { background-color: #f9fafb; }
  .bg-gray-100 { background-color: #f3f4f6; }
  .bg-gray-200 { background-color: #e5e7eb; }
  .bg-gray-500 { background-color: #6b7280; }
  .bg-gray-600 { background-color: #4b5563; }
  .bg-red-600 { background-color: #dc2626; }
  .bg-red-700 { background-color: #b91c1c; }
  .bg-blue-50 { background-color: #eff6ff; }
  .bg-green-600 { background-color: #16a34a; }
  .bg-green-700 { background-color: #15803d; }
  .bg-blue-600 { background-color: #2563eb; }
  .bg-blue-700 { background-color: #1d4ed8; }
  .border { border-width: 1px; border-style: solid; border-color: #e5e7eb; }
  .border-l-4 { border-left-width: 4px; border-left-style: solid; }
  .border-blue-400 { border-color: #60a5fa; }
  .border-orange-400 { border-color: #fb923c; }
  .border-green-400 { border-color: #4ade80; }
  .border-blue-200 { border-color: #bfdbfe; }
  .border-gray-300 { border-color: #d1d5db; }
  .border-white { border-color: white; }
  .rounded { border-radius: 0.25rem; }
  .rounded-lg { border-radius: 0.5rem; }
  .rounded-xl { border-radius: 0.75rem; }
  .grid { display: grid; }
  .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
  .gap-8 { gap: 32px; }
  .gap-6 { gap: 24px; }
  .gap-4 { gap: 16px; }
  .gap-2 { gap: 8px; }
  .flex { display: flex; }
  .flex-1 { flex: 1 1 0%; }
  .flex-col { flex-direction: column; }
  .items-center { align-items: center; }
  .justify-center { justify-content: center; }
  .justify-between { justify-content: space-between; }
  .text-center { text-align: center; }
  .mb-6 { margin-bottom: 24px; }
  .mb-4 { margin-bottom: 16px; }
  .mb-3 { margin-bottom: 12px; }
  .mb-2 { margin-bottom: 8px; }
  .mt-8 { margin-top: 32px; }
  .mt-6 { margin-top: 24px; }
  .mt-3 { margin-top: 12px; }
  .mt-1 { margin-top: 4px; }
  .mr-3 { margin-right: 12px; }
  .mr-2 { margin-right: 8px; }
  .ml-2 { margin-left: 8px; }
  .w-full { width: 100%; }
  .w-4 { width: 16px; }
  .h-4 { height: 16px; }
  .h-2 { height: 8px; }
  .p-3 { padding: 12px; }
  .p-4 { padding: 16px; }
  .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }
  .block { display: block; }
  .inline-block { display: inline-block; }
  .hover\:bg-gray-200:hover { background-color: #e5e7eb; }
  .hover\:bg-red-700:hover { background-color: #b91c1c; }
  .hover\:bg-gray-600:hover { background-color: #4b5563; }
  .hover\:bg-green-700:hover { background-color: #15803d; }
  .hover\:bg-blue-700:hover { background-color: #1d4ed8; }
  .focus\:ring-2:focus { box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.5); outline: none; }
  .focus\:ring-red-500:focus { box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.5); }
  .focus\:border-red-500:focus { border-color: #ef4444; }
  .disabled\:opacity-70:disabled { opacity: 0.7; }
  .disabled\:cursor-not-allowed:disabled { cursor: not-allowed; }
  .disabled\:opacity-50:disabled { opacity: 0.5; }
  .transition-all { transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
  .transition-colors { transition-property: color, background-color, border-color; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
  .transition-transform { transition-property: transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
  .duration-300 { transition-duration: 300ms; }
  .appearance-none { appearance: none; }
  .cursor-pointer { cursor: pointer; }

  @media (min-width: 640px) {
    .sm\:px-6 { padding-left: 24px; padding-right: 24px; }
    .sm\:flex-row { flex-direction: row; }
  }

  @media (min-width: 768px) {
    .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  }

  @media (min-width: 1024px) {
    .lg\:px-8 { padding-left: 32px; padding-right: 32px; }
    .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .lg\:col-span-2 { grid-column: span 2 / span 2; }
    .lg\:col-span-1 { grid-column: span 1 / span 1; }
  }
</style>

<script>
  // Cargar CSS externos
  if (!document.querySelector('link[href*="leaflet"]')) {
    const leafletCSS = document.createElement('link');
    leafletCSS.rel = 'stylesheet';
    leafletCSS.href = 'https://unpkg.com/leaflet@1.9.3/dist/leaflet.css';
    document.head.appendChild(leafletCSS);
  }

  if (!document.querySelector('link[href*="font-awesome"]')) {
    const fontAwesome = document.createElement('link');
    fontAwesome.rel = 'stylesheet';
    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css';
    document.head.appendChild(fontAwesome);
  }

  // Estado global de la aplicación (migrado de React useState)
  let appState = {
    map: null,
    currentTrip: {},
    departure: '',
    destination: '',
    isLoading: false,
    error: '',
    isPrebooked: false,
    currentMadridTime: new Date(),
    currentTariffInfo: { tariff: 1, reason: '' },
    trafficFactor: 0.3,
    showAdvancedOptions: false,
    results: null
  };

  // Coordenadas conocidas (migradas de v0.dev)
  const knownLocations = {
    madrid: { lat: 40.4168, lng: -3.7038 },
    "aeropuerto barajas": { lat: 40.4983, lng: -3.5676 },
    aeropuerto: { lat: 40.4983, lng: -3.5676 },
    barajas: { lat: 40.4983, lng: -3.5676 },
    atocha: { lat: 40.4069, lng: -3.6892 },
    "plaza castilla": { lat: 40.4655, lng: -3.6887 },
    "pozuelo de alarcón": { lat: 40.435, lng: -3.8131 },
    pozuelo: { lat: 40.435, lng: -3.8131 },
    "las rozas": { lat: 40.4927, lng: -3.8736 },
    rozas: { lat: 40.4927, lng: -3.8736 },
    majadahonda: { lat: 40.473, lng: -3.8724 },
    alcobendas: { lat: 40.5475, lng: -3.6422 },
    getafe: { lat: 40.3048, lng: -3.7329 },
    "leganés": { lat: 40.3287, lng: -3.7649 },
    leganes: { lat: 40.3287, lng: -3.7649 },
    "móstoles": { lat: 40.3228, lng: -3.8658 },
    mostoles: { lat: 40.3228, lng: -3.8658 },
    "alcorcón": { lat: 40.3483, lng: -3.8284 },
    alcorcon: { lat: 40.3483, lng: -3.8284 },
    fuenlabrada: { lat: 40.2838, lng: -3.7994 },
    "torrejón de ardoz": { lat: 40.4589, lng: -3.4797 },
    torrejon: { lat: 40.4589, lng: -3.4797 },
    parla: { lat: 40.2369, lng: -3.7635 },
    coslada: { lat: 40.4256, lng: -3.5652 },
    "alcalá de henares": { lat: 40.482, lng: -3.3635 },
    alcala: { lat: 40.482, lng: -3.3635 },
    "chamartín": { lat: 40.4721, lng: -3.6827 },
    chamartin: { lat: 40.4721, lng: -3.6827 },
    "puerta del sol": { lat: 40.4168, lng: -3.7038 },
    sol: { lat: 40.4168, lng: -3.7038 },
    "gran vía": { lat: 40.42, lng: -3.7025 },
    "gran via": { lat: 40.42, lng: -3.7025 },
    "plaza mayor": { lat: 40.4155, lng: -3.7074 },
    cibeles: { lat: 40.4193, lng: -3.6931 },
    retiro: { lat: 40.4146, lng: -3.6846 },
    moncloa: { lat: 40.4352, lng: -3.719 },
    "avenida de américa": { lat: 40.4381, lng: -3.6773 },
    "avenida america": { lat: 40.4381, lng: -3.6773 },
    "conde de casal": { lat: 40.4057, lng: -3.6687 },
    "nuevos ministerios": { lat: 40.4462, lng: -3.6926 },
    "cuatro caminos": { lat: 40.4459, lng: -3.7095 },
    "ciudad universitaria": { lat: 40.4493, lng: -3.7347 },
    valdebebas: { lat: 40.4833, lng: -3.6167 },
    "las tablas": { lat: 40.4958, lng: -3.6889 },
    sanchinarro: { lat: 40.4833, lng: -3.6667 },
    hortaleza: { lat: 40.4667, lng: -3.6417 },
    canillas: { lat: 40.4583, lng: -3.6333 },
    "barajas pueblo": { lat: 40.4833, lng: -3.5833 }
  };

  // Tarifas oficiales Madrid 2025 (migradas de v0.dev)
  const tariffs = {
    1: {
      name: "Tarifa 1 - Diurna laborables",
      description: "Lunes a viernes de 07:00 a 21:00",
      startPrice: 2.55,
      pricePerKm: 1.35,
      pricePerHour: 26.5,
      franchise: 0
    },
    2: {
      name: "Tarifa 2 - Nocturna y festivos",
      description: "21:00 a 07:00 todos los días y sábados/domingos/festivos 07:00-21:00",
      startPrice: 3.2,
      pricePerKm: 1.5,
      pricePerHour: 28.5,
      franchise: 0
    },
    3: {
      name: "Tarifa 3 - Carrera mínima aeropuerto",
      description: "Desde aeropuerto, fuera M-30, menos de 9km",
      startPrice: 22.0,
      pricePerKm: 1.35,
      pricePerHour: 26.5,
      franchise: 9000
    },
    4: {
      name: "Tarifa 4 - Tarifa fija aeropuerto",
      description: "Aeropuerto ↔ Interior M-30",
      startPrice: 33.0,
      pricePerKm: 0,
      pricePerHour: 0,
      franchise: 0
    },
    7: {
      name: "Tarifa 7 - Estaciones",
      description: "Desde estaciones, menos de 1.45km",
      startPrice: 7.5,
      pricePerKm: 1.35,
      pricePerHour: 26.5,
      franchise: 1450
    }
  };

  // Función para verificar feriados (migrada de v0.dev)
  function checkIfHoliday(date) {
    const month = date.getMonth();
    const day = date.getDate();

    const holidays = [
      { month: 0, day: 1 },
      { month: 0, day: 6 },
      { month: 4, day: 1 },
      { month: 4, day: 2 },
      { month: 7, day: 15 },
      { month: 9, day: 12 },
      { month: 10, day: 1 },
      { month: 10, day: 9 },
      { month: 11, day: 6 },
      { month: 11, day: 8 },
      { month: 11, day: 25 }
    ];

    return holidays.some(holiday => holiday.month === month && holiday.day === day);
  }

  // Función para obtener info de tarifa actual (migrada de v0.dev)
  function getCurrentTariffInfo(madridTime) {
    const hour = madridTime.getHours();
    const day = madridTime.getDay();
    const isHoliday = checkIfHoliday(madridTime);

    const isWeekend = day === 0 || day === 6;
    const isNightTime = hour < 7 || hour >= 21;

    let tariff = 1;
    let reason = '';

    if (isHoliday) {
      tariff = 2;
      reason = 'Día festivo';
    } else if (isWeekend) {
      tariff = 2;
      reason = isNightTime ? 'Fin de semana + nocturno' : 'Fin de semana';
    } else if (isNightTime) {
      tariff = 2;
      reason = 'Horario nocturno';
    } else {
      tariff = 1;
      reason = 'Horario diurno laborable';
    }

    return { tariff, reason };
  }

  // Función para determinar tarifa automática (migrada de v0.dev)
  function determineAutomaticTariff(departureAddr, destinationAddr) {
    const madridTime = new Date();
    const hour = madridTime.getHours();
    const day = madridTime.getDay();

    const isFromAirport = departureAddr.toLowerCase().includes('barajas') || 
                         departureAddr.toLowerCase().includes('aeropuerto');
    const isToAirport = destinationAddr.toLowerCase().includes('barajas') || 
                       destinationAddr.toLowerCase().includes('aeropuerto');
    const isAirportTrip = isFromAirport || isToAirport;

    const interiorM30Zones = [
      'puerta del sol', 'gran vía', 'plaza mayor', 'cibeles', 'atocha', 'retiro',
      'plaza castilla', 'avenida de américa', 'conde de casal', 'moncloa',
      'sol', 'gran via', 'avenida america', 'nuevos ministerios', 'cuatro caminos'
    ];

    const isInteriorM30 = (address) => {
      const lowerAddr = address.toLowerCase();
      return interiorM30Zones.some(zone => lowerAddr.includes(zone));
    };

    const isFromStation = departureAddr.toLowerCase().includes('atocha') || 
                         departureAddr.toLowerCase().includes('chamartín');

    if (isAirportTrip && !appState.isPrebooked) {
      if ((isFromAirport && isInteriorM30(destinationAddr)) || 
          (isToAirport && isInteriorM30(departureAddr))) {
        return 4;
      } else {
        return 3;
      }
    } else if (isFromStation && !appState.isPrebooked) {
      return 7;
    } else {
      const isWeekend = day === 0 || day === 6;
      const isNightTime = hour < 7 || hour >= 21;
      const isHoliday = checkIfHoliday(madridTime);

      if (isNightTime || isWeekend || isHoliday) {
        return 2;
      } else {
        return 1;
      }
    }
  }

  // Función para encontrar coordenadas (migrada de v0.dev)
  function findCoordinates(location) {
    const normalizedLocation = location.toLowerCase().trim();

    if (knownLocations[normalizedLocation]) {
      return knownLocations[normalizedLocation];
    }

    for (const [key, coords] of Object.entries(knownLocations)) {
      if (normalizedLocation.includes(key) || key.includes(normalizedLocation)) {
        return coords;
      }
    }

    return null;
  }

  // Función para geocodificar dirección (migrada de v0.dev)
  async function geocodeAddress(address) {
    const localCoords = findCoordinates(address);
    if (localCoords) {
      return {
        lat: localCoords.lat,
        lng: localCoords.lng,
        display_name: address
      };
    }

    let searchAddress = address.trim();
    if (!searchAddress.toLowerCase().includes('madrid') && 
        !searchAddress.toLowerCase().includes('españa') && 
        !searchAddress.toLowerCase().includes('spain')) {
      searchAddress = `${searchAddress}, Madrid, España`;
    }

    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchAddress)}&countrycodes=es&bounded=1&viewbox=-4.5,40.3,-3.5,40.6&limit=5`
      );
      const data = await response.json();

      if (data.length > 0) {
        const madridResults = data.filter(result => {
          const lat = parseFloat(result.lat);
          const lon = parseFloat(result.lon);
          return lat >= 40.2 && lat <= 40.7 && lon >= -4.0 && lon <= -3.4;
        });

        const bestResult = madridResults.length > 0 ? madridResults[0] : data[0];
        return {
          lat: parseFloat(bestResult.lat),
          lng: parseFloat(bestResult.lon),
          display_name: bestResult.display_name
        };
      }

      throw new Error('Dirección no encontrada');
    } catch (error) {
      throw new Error(`No se pudo encontrar la ubicación: ${address}`);
    }
  }

  // Función para calcular costo de tiempo (migrada de v0.dev)
  function calculateTimeCost(durationMinutes, hourlyRate, trafficFactor) {
    const timeInTrafficMinutes = durationMinutes * trafficFactor;
    const timeCost = (timeInTrafficMinutes / 60) * hourlyRate;

    return {
      timeInTraffic: timeInTrafficMinutes,
      timeCost: timeCost
    };
  }

  // Función para calcular distancia directa (migrada de v0.dev)
  function calculateDirectDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Radio de la Tierra en km
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLng = ((lng2 - lng1) * Math.PI) / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * 
              Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }

  // Función para obtener factor de corrección de distancia (migrada de v0.dev)
  function getDistanceCorrectionFactor(origin, destination) {
    const isUrbanArea = (location) => {
      const urbanKeywords = ['madrid', 'centro', 'sol', 'gran via', 'cibeles', 'atocha'];
      return urbanKeywords.some(keyword => location.toLowerCase().includes(keyword));
    };

    const isSuburban = (location) => {
      const suburbanKeywords = ['las rozas', 'pozuelo', 'majadahonda', 'alcobendas'];
      return suburbanKeywords.some(keyword => location.toLowerCase().includes(keyword));
    };

    const isAirport = (location) => {
      return location.toLowerCase().includes('aeropuerto') || location.toLowerCase().includes('barajas');
    };

    if (isUrbanArea(origin) && isUrbanArea(destination)) {
      return 1.3; // Rutas urbanas cortas
    } else if (isAirport(origin) || isAirport(destination)) {
      return 1.2; // Rutas aeropuerto (más directas)
    } else if (isSuburban(origin) || isSuburban(destination)) {
      return 1.4; // Rutas suburbanas
    } else {
      return 1.35; // Factor por defecto
    }
  }

  // Función para cargar Leaflet
  function loadLeaflet() {
    return new Promise((resolve, reject) => {
      if (window.L) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://unpkg.com/leaflet@1.9.3/dist/leaflet.js';
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('Error cargando Leaflet'));
      document.head.appendChild(script);
    });
  }

  // Función para inicializar el mapa
  async function initMap() {
    if (appState.map) return appState.map;

    try {
      if (!window.L) {
        await loadLeaflet();
      }

      const mapContainer = document.getElementById('map');
      if (!mapContainer) return null;

      // Limpiar contenido del contenedor
      mapContainer.innerHTML = '';

      // Crear mapa centrado en Madrid
      appState.map = window.L.map('map').setView([40.4168, -3.7038], 10);

      // Agregar capa de tiles
      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© Colaboradores de OpenStreetMap'
      }).addTo(appState.map);

      console.log('✅ Mapa inicializado correctamente');
      return appState.map;

    } catch (error) {
      console.error('❌ Error inicializando mapa:', error);
      return null;
    }
  }

  // Función principal para calcular ruta (migrada de v0.dev)
  async function calculateRoute() {
    if (!appState.departure?.trim() || !appState.destination?.trim()) {
      showError('Por favor, ingrese las direcciones de origen y destino.');
      return;
    }

    setLoading(true);
    hideError();

    try {
      // Determinar tarifa automáticamente
      const autoTariff = determineAutomaticTariff(appState.departure, appState.destination);

      // Geocodificar direcciones
      let startCoords, endCoords;

      try {
        startCoords = findCoordinates(appState.departure);
        if (!startCoords) {
          const geocoded = await geocodeAddress(appState.departure);
          startCoords = { lat: geocoded.lat, lng: geocoded.lng };
        }
      } catch (error) {
        showError(`No se pudo encontrar la ubicación: "${appState.departure}". Intente con otra dirección conocida.`);
        setLoading(false);
        return;
      }

      try {
        endCoords = findCoordinates(appState.destination);
        if (!endCoords) {
          const geocoded = await geocodeAddress(appState.destination);
          endCoords = { lat: geocoded.lat, lng: geocoded.lng };
        }
      } catch (error) {
        showError(`No se pudo encontrar la ubicación: "${appState.destination}". Intente con otra dirección conocida.`);
        setLoading(false);
        return;
      }

      // Intentar obtener la ruta real usando OSRM
      try {
        const response = await fetch(
          `https://router.project-osrm.org/route/v1/driving/${startCoords.lng},${startCoords.lat};${endCoords.lng},${endCoords.lat}?geometries=geojson&overview=full`,
          { signal: AbortSignal.timeout(5000) }
        );

        if (!response.ok) {
          throw new Error(`Error en la respuesta OSRM: ${response.status}`);
        }

        const data = await response.json();

        if (data.code !== 'Ok' || !data.routes || data.routes.length === 0) {
          throw new Error('No se pudo calcular la ruta');
        }

        const route = data.routes[0];
        const distance = route.distance / 1000; // Convertir metros a kilómetros
        const duration = route.duration / 60; // Convertir segundos a minutos
        const geometry = route.geometry; // Geometría de la ruta para dibujar

        const tripData = calculateTripPrice(autoTariff, distance, duration, true, geometry);
        appState.results = tripData;
        appState.currentTrip = tripData;

        // Mostrar resultados
        displayResults(tripData);

        // Dibujar ruta en el mapa
        await drawRouteOnMap(startCoords, endCoords, geometry.coordinates, true);

      } catch (routeError) {
        console.error('Error al obtener ruta OSRM:', routeError);

        // Si falla OSRM, calculamos distancia directa como respaldo
        const directDistance = calculateDirectDistance(startCoords.lat, startCoords.lng, endCoords.lat, endCoords.lng);
        const correctionFactor = getDistanceCorrectionFactor(appState.departure, appState.destination);
        const correctedDistance = directDistance * correctionFactor;

        // Estimar duración basada en velocidad promedio
        const averageSpeed = 30; // km/h en ciudad
        const estimatedDuration = (correctedDistance / averageSpeed) * 60; // minutos

        const tripData = calculateTripPrice(autoTariff, correctedDistance, estimatedDuration, false);
        appState.results = tripData;
        appState.currentTrip = tripData;

        // Mostrar resultados
        displayResults(tripData);

        // Dibujar ruta en el mapa
        await drawRouteOnMap(startCoords, endCoords, [[startCoords.lng, startCoords.lat], [endCoords.lng, endCoords.lat]], false);
      }

    } catch (error) {
      console.error('Error al calcular la ruta:', error);
      showError('Error al calcular la ruta. Por favor, inténtelo de nuevo.');
    } finally {
      setLoading(false);
    }
  }

  // Función para calcular precio del viaje (migrada de v0.dev)
  function calculateTripPrice(autoTariff, distance, duration, isRealRoute, geometry = null) {
    const currentTariff = tariffs[autoTariff];
    let totalCost = 0;
    let kmCost = 0;
    let timeCost = 0;
    let timeInTraffic = 0;
    const franchiseDistance = currentTariff.franchise / 1000; // convertir a km

    if (autoTariff === 4) {
      // Tarifa fija aeropuerto - NO se cobra tiempo adicional
      totalCost = currentTariff.startPrice;
      kmCost = 0;
      timeCost = 0;
      timeInTraffic = 0;
    } else {
      // Calcular distancia facturable (después de franquicia)
      const billableDistance = Math.max(0, distance - franchiseDistance);
      kmCost = billableDistance * currentTariff.pricePerKm;

      // Calcular tiempo realista (solo cuando el taxi va lento)
      const timeCalculation = calculateTimeCost(duration, currentTariff.pricePerHour, appState.trafficFactor);
      timeCost = timeCalculation.timeCost;
      timeInTraffic = timeCalculation.timeInTraffic;

      totalCost = currentTariff.startPrice + kmCost + timeCost;

      // Para tarifa 3 y 7, verificar si se supera la franquicia
      if ((autoTariff === 3 && distance > 9) || (autoTariff === 7 && distance > 1.45)) {
        // Cambiar a tarifa normal después de la franquicia
        const normalTariff = determineAutomaticTariff(appState.departure, appState.destination);
        if (normalTariff !== autoTariff) {
          const extraDistance = distance - franchiseDistance;
          const extraTariff = tariffs[normalTariff];
          kmCost += extraDistance * extraTariff.pricePerKm;
          totalCost = currentTariff.startPrice + kmCost + timeCost;
        }
      }
    }

    // Suplementos (migrados de v0.dev)
    let supplements = 0;
    const now = new Date();
    const isChristmasEve = now.getMonth() === 11 && (now.getDate() === 24 || now.getDate() === 31);
    const isSpecialNight = isChristmasEve && (now.getHours() >= 21 || now.getHours() < 7);

    if (isSpecialNight && autoTariff !== 4) {
      supplements = 6.7; // Suplemento Nochebuena/Nochevieja
    }

    if (appState.isPrebooked) {
      supplements += Math.min(5.0, Math.max(currentTariff.startPrice, 2.55)); // Entre precio inicio y 5€
    }

    totalCost += supplements;

    return {
      departure: appState.departure,
      destination: appState.destination,
      distance,
      duration,
      tariff: autoTariff,
      tariffName: currentTariff.name,
      startPrice: currentTariff.startPrice,
      kmCost,
      timeCost,
      timeInTraffic,
      trafficFactor: appState.trafficFactor * 100, // Para mostrar como porcentaje
      supplements,
      totalCost,
      franchiseDistance,
      billableDistance: Math.max(0, distance - franchiseDistance),
      date: new Date().toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      routeGeometry: geometry,
      isRealRoute
    };
  }

  // Función para dibujar ruta en el mapa
  async function drawRouteOnMap(startCoords, endCoords, routeCoordinates, isRealRoute) {
    if (!appState.map) {
      appState.map = await initMap();
    }
    
    if (!appState.map) return;

    try {
      // Limpiar rutas anteriores
      appState.map.eachLayer(layer => {
        if (layer instanceof window.L.Polyline || layer instanceof window.L.Marker) {
          appState.map.removeLayer(layer);
        }
      });

      if (isRealRoute) {
        // Dibujar la ruta real usando la geometría de OSRM
        const leafletCoords = routeCoordinates.map(coord => [coord[1], coord[0]]);
        
        window.L.polyline(leafletCoords, {
          color: '#cc1417',
          weight: 5,
          opacity: 0.8
        }).addTo(appState.map);

        // Ajustar vista para que se vea toda la ruta
        appState.map.fitBounds(leafletCoords);
      } else {
        // Dibujar línea directa con estilo punteado para indicar que es una estimación
        const directLine = [
          [startCoords.lat, startCoords.lng],
          [endCoords.lat, endCoords.lng]
        ];

        window.L.polyline(directLine, {
          color: '#cc1417',
          weight: 4,
          dashArray: '10, 10', // Línea punteada para indicar estimación
          opacity: 0.7
        }).addTo(appState.map);

        // Ajustar vista
        appState.map.fitBounds(directLine, { padding: [50, 50] });
      }

      // Añadir marcadores
      const originIcon = window.L.divIcon({
        html: '<div style="background-color: #4CAF50; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>',
        className: 'custom-div-icon',
        iconSize: [16, 16],
        iconAnchor: [8, 8]
      });

      const destIcon = window.L.divIcon({
        html: '<div style="background-color: #F44336; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>',
        className: 'custom-div-icon',
        iconSize: [16, 16],
        iconAnchor: [8, 8]
      });

      window.L.marker([startCoords.lat, startCoords.lng], { icon: originIcon })
        .addTo(appState.map)
        .bindPopup(`<b>Origen:</b> ${appState.departure}`);

      window.L.marker([endCoords.lat, endCoords.lng], { icon: destIcon })
        .addTo(appState.map)
        .bindPopup(`<b>Destino:</b> ${appState.destination}`);

      console.log('✅ Ruta mostrada en el mapa');

    } catch (error) {
      console.error('❌ Error dibujando en el mapa:', error);
    }
  }

  // Funciones de UI helper
  function setLoading(loading) {
    appState.isLoading = loading;
    const loadingOverlay = document.getElementById('loading-overlay');
    const calculateButton = document.getElementById('calculate-button');
    const resetButton = document.getElementById('reset-button');
    
    if (loadingOverlay) {
      loadingOverlay.style.display = loading ? 'flex' : 'none';
    }
    
    if (calculateButton) {
      calculateButton.disabled = loading;
      calculateButton.innerHTML = loading ? 
        '<div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>Calculando...' :
        '<i class="fas fa-calculator mr-2"></i>Calcular Ruta y Tarifa';
    }
    
    if (resetButton) {
      resetButton.disabled = loading;
    }
  }

  function showError(message) {
    appState.error = message;
    const errorDiv = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    
    if (errorDiv && errorText) {
      errorText.textContent = message;
      errorDiv.style.display = 'block';
    }
  }

  function hideError() {
    appState.error = '';
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) {
      errorDiv.style.display = 'none';
    }
  }

  // Función para mostrar resultados
  function displayResults(results) {
    const placeholder = document.getElementById('results-placeholder');
    const content = document.getElementById('results-content');
    
    if (placeholder) placeholder.style.display = 'none';
    if (content) {
      content.style.display = 'block';
      content.innerHTML = `
        <div class="results-card">
          <div class="tariff-badge">
            <div class="font-bold">${results.tariffName}</div>
            <div class="text-sm opacity-90">Tarifa ${results.tariff} aplicada automáticamente</div>
          </div>

          <div class="space-y-3 mb-4">
            <div class="flex justify-between">
              <span class="text-gray-600">Origen:</span>
              <span class="font-medium text-right">${results.departure}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Destino:</span>
              <span class="font-medium text-right">${results.destination}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Distancia:</span>
              <span class="font-medium">${results.distance.toFixed(2)} km</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Duración:</span>
              <span class="font-medium">
                ${Math.floor(results.duration / 60)}h ${Math.round(results.duration % 60)}min
              </span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-gray-600">Tipo de ruta:</span>
              <span class="route-type-badge ${results.isRealRoute ? 'route-type-real' : 'route-type-estimated'}">
                ${results.isRealRoute ? 
                  '<i class="fas fa-check-circle mr-1"></i> Ruta real' : 
                  '<i class="fas fa-exclamation-triangle mr-1"></i> Estimación'
                }
              </span>
            </div>
            ${results.trafficFactor > 0 ? `
              <div class="flex justify-between">
                <span class="text-gray-600">Factor tráfico:</span>
                <span class="font-medium">${results.trafficFactor.toFixed(0)}%</span>
              </div>
            ` : ''}
          </div>

          <div class="price-breakdown">
            <h4 class="font-semibold text-gray-700 mb-3 border-b pb-2">
              <i class="fas fa-receipt mr-2"></i>
              Desglose oficial:
            </h4>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span>Precio inicial:</span>
                <span>${results.startPrice.toFixed(2)} €</span>
              </div>
              ${results.franchiseDistance > 0 ? `
                <div class="flex justify-between text-blue-600">
                  <span>Franquicia:</span>
                  <span>${results.franchiseDistance.toFixed(2)} km</span>
                </div>
              ` : ''}
              <div class="flex justify-between">
                <span>Por distancia:</span>
                <span>${results.kmCost.toFixed(2)} €</span>
              </div>
              ${results.tariff === 4 ? `
                <div class="flex justify-between text-green-600">
                  <span>Tarifa fija:</span>
                  <span>Incluido</span>
                </div>
              ` : `
                <div class="flex justify-between">
                  <span>Por tiempo:</span>
                  <span>${results.timeCost.toFixed(2)} €</span>
                </div>
                ${results.timeInTraffic > 0 ? `
                  <div class="flex justify-between text-gray-500 text-xs">
                    <span>Tiempo en tráfico:</span>
                    <span>${Math.round(results.timeInTraffic)} min</span>
                  </div>
                ` : ''}
              `}
              ${results.supplements > 0 ? `
                <div class="flex justify-between">
                  <span>Suplementos:</span>
                  <span>${results.supplements.toFixed(2)} €</span>
                </div>
              ` : ''}
            </div>
          </div>

          <div class="total-price">
            <i class="fas fa-euro-sign mr-2"></i>
            Total: ${results.totalCost.toFixed(2)} €
          </div>

          <!-- Botones de acción -->
          <div class="mt-6 space-y-3">
            <a
              href="https://wa.me/34919930212?text=${encodeURIComponent(
                `¡Hola! Quiero reservar un taxi.\n📍 Desde: ${results.departure}\n🏁 Hacia: ${results.destination}\n💰 Precio estimado: ${results.totalCost.toFixed(2)}€`
              )}"
              target="_blank"
              rel="noopener noreferrer"
              class="w-full bg-green-600 hover:bg-green-700 text-white py-4 px-6 rounded-xl flex items-center justify-center transition-all duration-300 font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              💬 Reservar por WhatsApp
            </a>
            <a
              href="tel:+34919930212"
              class="w-full bg-blue-600 hover:bg-blue-700 text-white py-4 px-6 rounded-xl flex items-center justify-center transition-all duration-300 font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              📞 Llamar para Reservar
            </a>
          </div>
        </div>
      `;
    }
  }

  // Función para limpiar formulario
  function resetForm() {
    appState.departure = '';
    appState.destination = '';
    appState.results = null;
    appState.error = '';
    appState.isLoading = false;

    // Limpiar inputs
    const departureInput = document.getElementById('departure-input');
    const destinationInput = document.getElementById('destination-input');
    const prebookedCheckbox = document.getElementById('prebooked-checkbox');
    
    if (departureInput) departureInput.value = '';
    if (destinationInput) destinationInput.value = '';
    if (prebookedCheckbox) prebookedCheckbox.checked = false;

    // Ocultar error y resultados
    hideError();
    const placeholder = document.getElementById('results-placeholder');
    const content = document.getElementById('results-content');
    
    if (placeholder) placeholder.style.display = 'block';
    if (content) content.style.display = 'none';

    // Limpiar el mapa
    if (appState.map) {
      try {
        appState.map.eachLayer(layer => {
          if (layer instanceof window.L.Polyline || layer instanceof window.L.Marker) {
            appState.map.removeLayer(layer);
          }
        });
        appState.map.setView([40.4168, -3.7038], 10);
      } catch (error) {
        console.log('Error limpiando mapa:', error);
      }
    }

    console.log('✅ Formulario reiniciado');
  }

  // Función para establecer ubicación inteligente
  function setLocation(place) {
    const departureInput = document.getElementById('departure-input');
    const destinationInput = document.getElementById('destination-input');
    
    if (!departureInput || !destinationInput) return;
    
    if (!departureInput.value.trim()) {
      // Si origen está vacío, llenar origen
      departureInput.value = place;
      appState.departure = place;
      console.log('✅ Origen establecido:', place);
    } else if (!destinationInput.value.trim()) {
      // Si origen tiene valor pero destino está vacío, llenar destino
      destinationInput.value = place;
      appState.destination = place;
      console.log('✅ Destino establecido:', place);
    } else {
      // Si ambos están llenos, reemplazar origen y limpiar destino
      departureInput.value = place;
      destinationInput.value = '';
      appState.departure = place;
      appState.destination = '';
      console.log('✅ Origen reemplazado, destino limpiado');
    }
    
    hideError();
  }

  // Función para intercambiar ubicaciones
  function swapLocations() {
    const departureInput = document.getElementById('departure-input');
    const destinationInput = document.getElementById('destination-input');
    
    if (departureInput && destinationInput) {
      const temp = departureInput.value;
      departureInput.value = destinationInput.value;
      destinationInput.value = temp;
      
      // Actualizar estado
      const tempState = appState.departure;
      appState.departure = appState.destination;
      appState.destination = tempState;
      
      hideError();
      console.log('🔄 Ubicaciones intercambiadas');
    }
  }

  // Función para actualizar el display de tiempo en tiempo real
  function updateTimeDisplay() {
    const madridTime = new Date(new Date().toLocaleString('en-US', { timeZone: 'Europe/Madrid' }));
    appState.currentMadridTime = madridTime;
    const tariffInfo = getCurrentTariffInfo(madridTime);
    appState.currentTariffInfo = tariffInfo;

    const timeDisplay = document.getElementById('current-time-display');
    const tariffDisplay = document.getElementById('current-tariff-info');

    if (timeDisplay) {
      timeDisplay.textContent = `${madridTime.toLocaleString('es-ES', {
        timeZone: 'Europe/Madrid',
        hour: '2-digit',
        minute: '2-digit'
      })} - Tarifa ${tariffInfo.tariff}`;
    }

    if (tariffDisplay) {
      tariffDisplay.textContent = `${tariffInfo.reason} - Precio base: ${tariffs[tariffInfo.tariff].startPrice.toFixed(2)}€`;
    }
  }

  // Función principal de inicialización
  function initCalculator() {
    console.log('🚀 Inicializando calculadora completa...');

    // Configurar event listeners
    const departureInput = document.getElementById('departure-input');
    const destinationInput = document.getElementById('destination-input');
    const prebookedCheckbox = document.getElementById('prebooked-checkbox');
    const calculateButton = document.getElementById('calculate-button');
    const resetButton = document.getElementById('reset-button');
    const swapButton = document.getElementById('swap-button');
    const advancedToggle = document.getElementById('advanced-toggle');
    const trafficSlider = document.getElementById('traffic-slider');

    if (departureInput) {
      departureInput.addEventListener('input', (e) => {
        appState.departure = e.target.value;
        hideError();
      });
    }

    if (destinationInput) {
      destinationInput.addEventListener('input', (e) => {
        appState.destination = e.target.value;
        hideError();
      });
    }

    if (prebookedCheckbox) {
      prebookedCheckbox.addEventListener('change', (e) => {
        appState.isPrebooked = e.target.checked;
        console.log('✅ Servicio concertado:', appState.isPrebooked);
      });
    }

    if (calculateButton) {
      calculateButton.addEventListener('click', calculateRoute);
      console.log('✅ Botón calcular conectado');
    }

    if (resetButton) {
      resetButton.addEventListener('click', resetForm);
      console.log('✅ Botón reiniciar conectado');
    }

    if (swapButton) {
      swapButton.addEventListener('click', swapLocations);
      console.log('✅ Botón intercambiar conectado');
    }

    // Advanced options toggle
    if (advancedToggle) {
      advancedToggle.addEventListener('click', () => {
        appState.showAdvancedOptions = !appState.showAdvancedOptions;
        const advancedOptions = document.getElementById('advanced-options');
        const chevron = document.getElementById('advanced-chevron');
        
        if (advancedOptions) {
          advancedOptions.style.display = appState.showAdvancedOptions ? 'block' : 'none';
        }
        
        if (chevron) {
          chevron.style.transform = appState.showAdvancedOptions ? 'rotate(180deg)' : 'rotate(0deg)';
        }
      });
    }

    // Traffic slider
    if (trafficSlider) {
      trafficSlider.addEventListener('input', (e) => {
        appState.trafficFactor = parseFloat(e.target.value) / 100;
        const trafficValue = document.getElementById('traffic-value');
        if (trafficValue) {
          trafficValue.textContent = `${e.target.value}%`;
        }
        console.log('🚦 Factor de tráfico:', appState.trafficFactor);
      });
    }

    // Conectar botones de ubicaciones
    const locationBtns = document.querySelectorAll('.suggestion-btn');
    locationBtns.forEach(btn => {
      const location = btn.getAttribute('data-location');
      if (location) {
        btn.addEventListener('click', () => setLocation(location));
        console.log('✅ Botón ubicación conectado:', location);
      }
    });

    // Inicializar mapa después de un breve delay
    setTimeout(() => {
      initMap().catch(error => console.log('Mapa no disponible:', error));
    }, 1000);

    // Inicializar reloj en tiempo real
    updateTimeDisplay();
    setInterval(updateTimeDisplay, 1000);

    console.log('🎉 Calculadora inicializada completamente');
  }

  // Inicializar cuando la página esté completamente cargada
  document.addEventListener('astro:page-load', initCalculator);
  
  // Fallback para navegadores que no soporten astro:page-load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCalculator);
  } else {
    initCalculator();
  }

  console.log('📜 Script de calculadora completa cargado');
